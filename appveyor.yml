image: Visual Studio 2022
environment:

  matrix:

    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    #- PYTHON: "C:\\Python39"
    #- PYTHON: "C:\\Python310"
    #- PYTHON: "C:\\Python311"
    #- PYTHON: "C:\\Python312"
    - PYTHON: "C:\\Python39-x64"
    - PYTHON: "C:\\Python310-x64"
    - PYTHON: "C:\\Python311-x64"
    - PYTHON: "C:\\Python312-x64"

install:
  # Newer setuptools is needed for proper support of pyproject.toml
  - "%PYTHON%\\python.exe -m pip install setuptools --upgrade"
  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel --upgrade"
  - "%PYTHON%\\python.exe -m pip install build setuptools_scm"
  - "%PYTHON%\\python.exe -m pip install pytest numpy pandas"

build: off

test_script:
  # Put your test command here.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  #- "build.cmd %PYTHON%\\python.exe setup.py test"
  - "%PYTHON%\\python.exe -m pytest -v --doctest-modules --ignore benchmark.py"

after_test:
  # This step builds your wheels.
  # Again, you need to use %PYTHON% to get the correct interpreter
  #- "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"
  - "%PYTHON%\\python.exe -m build -nswx ."

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
